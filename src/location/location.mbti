// Generated using `moon info`, DON'T EDIT IT
package "peter-jerry-ye/adventure/location"

import(
  "peter-jerry-ye/adventure/entity"
  "peter-jerry-ye/adventure/math"
)

// Values
fn get_collision(@entity.Entity) -> Map[@entity.Entity, @math.CollisionInfo]

fn get_entity(@entity.Entity) -> State?

fn get_velocity(@entity.Entity) -> @math.Vec2D

fn is_grounded(@entity.Entity) -> Bool

let quadtree : Ref[QuadTree]

fn register_collide_callback((@entity.Entity, @entity.Entity, @math.CollisionInfo) -> Unit) -> Unit

fn set_entity(@entity.Entity, @math.Vec2D, @math.HitBox, velocity~ : @math.Vec2D = ..) -> Unit

fn set_horizontal_velocity(@entity.Entity, Double) -> Unit

fn set_vertical_velocity(@entity.Entity, Double) -> Unit

fn update() -> Unit

// Types and methods
pub struct QuadTree {
  position : @math.Vec2D
  size : @math.Vec2D
  children : Array[QuadTree]
  // private fields
}

pub struct State {
  location : @math.Vec2D
  hitbox : @math.HitBox
  velocity : @math.Vec2D
  // private fields
}

// Type aliases

// Traits

