// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///|
pub fn add_player(position : @math.Vec2D) -> Unit {
  guard player.val is None else { return }
  let entity = @entity.Entity::new()
  @object.set_character(entity, MaskDude)
  @object.set_direction(entity, Right)
  @location.set_entity(
    entity,
    position,
    @math.HitBox::rect(
      position + @math.Vec2D::new(2, 0),
      @math.Vec2D::new(28, 32),
    ),
  )
  player.val = Some(entity)
  @entity.on_remove(entity, () => player.val = None)
  @anime.play_animation(entity, @anime.default_sprites.get(MaskDude).unwrap())
}

///|
pub fn add_rockhead(position : @math.Vec2D) -> Unit {
  let rockhead = @entity.Entity::new()
  @object.set_character(rockhead, RockHead)
  @object.set_direction(rockhead, Right)
  @location.set_entity(
    rockhead,
    position,
    @math.HitBox::rect(position, @math.Vec2D::new(32, 32)),
  )
  rockheads.set(rockhead, RockHeadAI::new(position, Down))
  @entity.on_remove(rockhead, () => rockheads.remove(rockhead))
  @anime.play_animation(rockhead, @anime.default_sprites.get(RockHead).unwrap())
}

///|
pub fn add_mushroom(position : @math.Vec2D) -> Unit {
  let mushroom = @entity.Entity::new()
  @object.set_character(mushroom, Mushroom)
  @object.set_direction(mushroom, Right)
  @location.set_entity(
    mushroom,
    position,
    @math.HitBox::rect(
      position + @math.Vec2D::new(0, 12),
      @math.Vec2D::new(32, 20),
    ),
  )
  @anime.play_animation(mushroom, @anime.default_sprites.get(Mushroom).unwrap())
}

///|
pub fn add_trophy(position : @math.Vec2D) -> Unit {
  let trophy = @entity.Entity::new()
  @object.set_character(trophy, Trophy)
  @object.set_direction(trophy, Right)
  @location.set_entity(
    trophy,
    position,
    @math.HitBox::rect(
      position + @math.Vec2D::new(4, 16),
      @math.Vec2D::new(56, 48),
    ),
  )
  @anime.play_animation(trophy, @anime.default_sprites.get(Trophy).unwrap())
}

///|
pub fn add_banana(position : @math.Vec2D) -> Unit {
  let banana = @entity.Entity::new()
  @object.set_character(banana, Banana)
  @object.set_direction(banana, Right)
  @location.set_entity(
    banana,
    position,
    @math.HitBox::rect(position, @math.Vec2D::new(32, 32)),
  )
  @anime.play_animation(banana, @anime.default_sprites.get(Banana).unwrap())
}
